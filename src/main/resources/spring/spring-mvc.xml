<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 扫描 controller -->
    <context:component-scan base-package="com.mx.controller"/>
    <!--<context:component-scan base-package="com.mx" />-->
    <context:component-scan base-package="com.mx.interceptor" />
    <mvc:default-servlet-handler />
    <!-- 启用spring mvc 注解 -->
    <context:annotation-config />

    <mvc:annotation-driven ignore-default-model-on-redirect="true">
        <!-- 编码转换 -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
    <bean id="mappingJackson2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJackson2HttpMessageConverter" /><!-- json转换器 -->
            </list>
        </property>
    </bean>


    <!--velocity模板配置-->
    <bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/vm/"/>
        <property name="configLocation" value="classpath:velocity.properties"/>
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding">UTF-8</prop>
            </props>
        </property>
    </bean>

    <!--VelocityLayoutViewResolver-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
        <property name="suffix" value=".vm"/>
        <property name="prefix" value=""/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="exposeSpringMacroHelpers" value="true" /><!--是否使用spring对宏定义的支持-->
        <property name="exposeRequestAttributes" value="true" /><!--是否开放request属性-->
        <property name="requestContextAttribute" value="rc"/><!--request属性引用名称-->
        <property name="layoutUrl" value="layout.vm"/>
        <property name="toolboxConfigLocation" value="/WEB-INF/classes/toolbox.xml" />
        <property name="cache" value="false" />
        <property name="dateToolAttribute" value="date" /><!--日期函数名称-->
        <property name="numberToolAttribute" value="number" /><!--数字函数名称-->
    </bean>






    <!--&lt;!&ndash; 定义跳转的文件的前后缀 ，视图模式配置&ndash;&gt;-->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
        <!--&lt;!&ndash; 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 &ndash;&gt;-->
        <!--<property name="prefix" value="/WEB-INF/views/" />-->
        <!--<property name="suffix" value=".jsp" />-->
    <!--</bean>-->

    <!--&lt;!&ndash; 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 &ndash;&gt;-->
    <!--<bean id="multipartResolver"-->
          <!--class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
        <!--&lt;!&ndash; 默认编码 &ndash;&gt;-->
        <!--<property name="defaultEncoding" value="utf-8" />-->
        <!--&lt;!&ndash; 文件大小最大值 &ndash;&gt;-->
        <!--<property name="maxUploadSize" value="10485760000" />-->
        <!--&lt;!&ndash; 内存中的最大值 &ndash;&gt;-->
        <!--<property name="maxInMemorySize" value="40960" />-->
    <!--</bean>-->

    <!-- 带状态的视图控制器标签 -->
    <mvc:view-controller path="/error/**" status-code="200" />

    <!-- 配置静态资源，直接映射到对应的文件夹，DispatcherServlet 不处理 -->
    <!--<mvc:resources location="/WEB-INF/css/" mapping="/css/**"/>-->
    <!--<mvc:resources location="/WEB-INF/js/" mapping="/js/**"/>-->
    <!--<mvc:resources location="/WEB-INF/images/" mapping="/images/**"/>-->

    <!--&lt;!&ndash; for velocity view &ndash;&gt;-->
    <!--<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">-->
        <!--<property name="resourceLoaderPath" value="/WEB-INF/views/" /> &lt;!&ndash; velocity前端渲染文件.vm路径设置&ndash;&gt;-->
    <!--</bean>-->
    <!--<bean id="vmViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">-->
        <!--<property name="cache" value="true" />-->
        <!--<property name="prefix" value="" />-->
        <!--<property name="suffix" value=".vm" />-->
        <!--<property name="order" value="1" /> &lt;!&ndash; 多ViewResovler配置 &ndash;&gt;-->

    <!--</bean>-->

    <!--<mvc:interceptors>-->
        <!--&lt;!&ndash; 权限认证拦截器 &ndash;&gt;-->
        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/**"/>-->
            <!--<bean class="com.mx.auth.AuthorityAnnotationInterceptor"></bean>-->
        <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->

    <!--将日志类注入到bean中。-->
    <bean id="logAspect" class="com.mx.aspect.LogAspect"></bean>

    <aop:config>
        <!--调用日志类-->
        <aop:aspect id="LogAspect" ref="logAspect">
            <!--配置在controller包下所有的类在调用之前都会被拦截-->
            <aop:pointcut id="log" expression="execution(* com.mx.controller.*.*(..))"/>
            <!-- 方法前触发 --><aop:before pointcut-ref="log" method="before"/>
            <!-- 方法后触发 --><aop:after pointcut-ref="log" method="after"/>
            <!-- 环绕触发  <aop:around pointcut-ref="log" method="around"/>  -->
        </aop:aspect>
    </aop:config>


</beans>